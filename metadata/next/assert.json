{"name":"assert","summary":"<p>A Node.js-compatible implementation of the core <code>assert</code> module</p>\n","extends":"Object","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"pseudo","editUrl":"https://github.com/appcelerator/titanium_mobile/edit/master/apidoc/NodeJS/assert.yml","methods":[{"name":"deepEqual","summary":"<p>Tests for deep equality between the <code>actual</code> and <code>expected</code> parameters.\nConsider using <code>assert.deepStrictEqual()</code> instead.\n<code>assert.deepEqual()</code> can have surprising results.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"actual","summary":"<p>The actual value</p>\n","type":"any"},{"name":"expected","summary":"<p>The expected value</p>\n","type":"any"},{"name":"message","summary":"<p>error message</p>\n","type":["String","Error"],"optional":true}],"returns":{"type":"void"}},{"name":"deepStrictEqual","summary":"<p>Tests for deep equality between the <code>actual</code> and <code>expected</code> parameters.\n&quot;Deep&quot; equality means that the enumerable &quot;own&quot; properties of child objects are recursively evaluated also by the following rules.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"actual","summary":"<p>The actual value</p>\n","type":"any"},{"name":"expected","summary":"<p>The expected value</p>\n","type":"any"},{"name":"message","summary":"<p>error message</p>\n","type":["String","Error"],"optional":true}],"returns":{"type":"void"}},{"name":"doesNotReject","summary":"<p>Awaits the <code>asyncFn</code> promise or, if <code>asyncFn</code> is a function, immediately calls the function and awaits the returned promise to complete. It will then check that the promise is not rejected.</p>\n<p>If <code>asyncFn</code> is a function and it throws an error synchronously, <code>assert.doesNotReject()</code> will return a rejected <code>Promise</code> with that error. If the function does not return a promise, <code>assert.doesNotReject()</code> will return a rejected <code>Promise</code> with an <code>ERR_INVALID_RETURN_VALUE</code> error. In both cases the error handler is skipped.</p>\n<p>Using <code>assert.doesNotReject()</code> is actually not useful because there is little benefit in catching a rejection and then rejecting it again. Instead, consider adding a comment next to the specific code path that should not reject and keep error messages as expressive as possible.</p>\n<p>If specified, <code>error</code> can be a <code>Class</code>, <code>RegExp</code> or a validation function. See <code>assert.throws()</code> for more details.</p>\n<p>Besides the async nature to await the completion behaves identically to <code>assert.doesNotThrow()</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"asyncFn","summary":"<p>function to invoke</p>\n","type":["Function","Promise<Object>"]},{"name":"error","summary":"<p>The expected <code>Error</code> type (class or name)</p>\n","type":["RegExp","Function"],"optional":true},{"name":"message","summary":"<p>error message</p>\n","type":"String","optional":true}],"returns":{"type":"void"}},{"name":"doesNotThrow","summary":"<p>Asserts that the function <code>fn</code> does not throw an <code>error</code>.</p>\n<p>Using <code>assert.doesNotThrow()</code> is actually not useful because there is no benefit in catching an error and then rethrowing it. Instead, consider adding a comment next to the specific code path that should not throw and keep error messages as expressive as possible.</p>\n<p>When <code>assert.doesNotThrow()</code> is called, it will immediately call the <code>fn</code> function.</p>\n<p>If an error is thrown and it is the same type as that specified by the <code>error</code> parameter, then an <code>AssertionError</code> is thrown. If the error is of a different type, or if the error parameter is undefined, the error is propagated back to the caller.</p>\n<p>If specified, <code>error</code> can be a Class, RegExp or a validation function. See <code>assert.throws()</code> for more details.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fn","summary":"<p>function to invoke</p>\n","type":"Function"},{"name":"error","summary":"<p>The expected <code>Error</code> type (class or name)</p>\n","type":["RegExp","Function"],"optional":true},{"name":"message","summary":"<p>error message</p>\n","type":"String","optional":true}],"returns":{"type":"void"}},{"name":"equal","summary":"<p>Tests shallow, coercive equality between the actual and expected parameters using the Abstract Equality Comparison (<code>==</code>).\n<code>NaN</code> is special handled and treated as being identical in case both sides are <code>NaN</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"actual","summary":"<p>The actual value</p>\n","type":"any"},{"name":"expected","summary":"<p>The expected value</p>\n","type":"any"},{"name":"message","summary":"<p>error message</p>\n","type":["String","Error"],"optional":true}],"returns":{"type":"void"}},{"name":"fail","summary":"<p>Throws an <code>AssertionError</code> with the provided error message or a default error message.\nIf the <code>message</code> parameter is an instance of an <code>Error</code> then it will be thrown instead of the <code>AssertionError</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"message","summary":"<p>error message</p>\n","type":["String","Error"],"optional":true}],"returns":{"type":"void"}},{"name":"ifError","summary":"<p>Throws <code>value</code> if <code>value</code> is not <code>undefined</code> or <code>null</code>.\nThis is useful when testing the error argument in callbacks.\nThe stack trace contains all frames from the error passed to <code>ifError()</code> including the potential new frames for <code>ifError()</code> itself.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"value","summary":"<p>potentially thrown value/object</p>\n","type":"any"}],"returns":{"type":"void"}},{"name":"notDeepEqual","summary":"<p>Tests for any deep inequality. Opposite of <code>assert.deepEqual()</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"actual","summary":"<p>The actual value</p>\n","type":"any"},{"name":"expected","summary":"<p>The expected value</p>\n","type":"any"},{"name":"message","summary":"<p>error message</p>\n","type":["String","Error"],"optional":true}],"returns":{"type":"void"}},{"name":"notDeepStrictEqual","summary":"<p>Tests for deep strict inequality. Opposite of <code>assert.deepStrictEqual()</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"actual","summary":"<p>The actual value</p>\n","type":"any"},{"name":"expected","summary":"<p>The expected value</p>\n","type":"any"},{"name":"message","summary":"<p>error message</p>\n","type":["String","Error"],"optional":true}],"returns":{"type":"void"}},{"name":"notEqual","summary":"<p>Tests shallow, coercive inequality with the Abstract Equality Comparison (<code>!=</code>).\n<code>NaN</code> is special handled and treated as being identical in case both sides are <code>NaN</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"actual","summary":"<p>The actual value</p>\n","type":"any"},{"name":"expected","summary":"<p>The expected value</p>\n","type":"any"},{"name":"message","summary":"<p>error message</p>\n","type":["String","Error"],"optional":true}],"returns":{"type":"void"}},{"name":"notStrictEqual","summary":"<p>Tests strict inequality between the actual and expected parameters as determined by the <a href=\"https://tc39.github.io/ecma262/#sec-samevalue\">SameValue Comparison</a>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"actual","summary":"<p>The actual value</p>\n","type":"any"},{"name":"expected","summary":"<p>The expected value</p>\n","type":"any"},{"name":"message","summary":"<p>error message</p>\n","type":["String","Error"],"optional":true}],"returns":{"type":"void"}},{"name":"ok","summary":"<p>Tests if <code>value</code> is truthy. It is equivalent to <code>assert.equal(!!value, true, message)</code>.</p>\n<p>If <code>value</code> is not truthy, an <code>AssertionError</code> is thrown with a message property set equal to the value of the <code>message</code> parameter.\nIf the <code>message</code> parameter is <code>undefined</code>, a default error message is assigned.\nIf the <code>message</code> parameter is an instance of an <code>Error</code> then it will be thrown instead of the <code>AssertionError</code>.\nIf no arguments are passed in at all message will be set to the string: <code>'No value argument passed to \\</code>assert.ok()`'`.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"value","summary":"<p>The input that is checked for being truthy.</p>\n","type":"any"},{"name":"message","summary":"<p>error message</p>\n","type":["String","Error"],"optional":true}],"returns":{"type":"void"}},{"name":"rejects","summary":"<p>Awaits the <code>asyncFn</code> promise or, if <code>asyncFn</code> is a function, immediately calls the function and awaits the returned promise to complete. It will then check that the promise is rejected.</p>\n<p>If <code>asyncFn</code> is a function and it throws an error synchronously, <code>assert.rejects()</code> will return a rejected <code>Promise</code> with that error. If the function does not return a promise, <code>assert.rejects()</code> will return a rejected <code>Promise</code> with an <code>ERR_INVALID_RETURN_VALUE</code> error. In both cases the error handler is skipped.</p>\n<p>Besides the async nature to await the completion behaves identically to <code>assert.throws()</code>.</p>\n<p>If specified, <code>error</code> can be a <code>Class</code>, <code>RegExp</code>, a validation function, an object where each property will be tested for, or an instance of error where each property will be tested for including the non-enumerable <code>message</code> and <code>name</code> properties.</p>\n<p>If specified, <code>message</code> will be the message provided by the <code>AssertionError</code> if the <code>asyncFn</code> fails to reject.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"asyncFn","summary":"<p>function to invoke</p>\n","type":["Function","Promise<any>"]},{"name":"error","summary":"<p>The expected <code>Error</code> type (class or name)</p>\n","type":["RegExp","Function","Object","Error"],"optional":true},{"name":"message","summary":"<p>error message</p>\n","type":"String","optional":true}],"returns":{"type":"void"}},{"name":"strictEqual","summary":"<p>Tests strict equality between the actual and expected parameters as determined by the <a href=\"https://tc39.github.io/ecma262/#sec-samevalue\">SameValue Comparison</a>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"actual","summary":"<p>The actual value</p>\n","type":"any"},{"name":"expected","summary":"<p>The expected value</p>\n","type":"any"},{"name":"message","summary":"<p>error message</p>\n","type":["String","Error"],"optional":true}],"returns":{"type":"void"}},{"name":"throws","summary":"<p>Expects the function <code>fn</code> to throw an error.</p>\n<p>If specified, <code>error</code> can be a <code>Class</code>, <code>RegExp</code>, a validation function, a validation object where each property will be tested for strict deep equality, or an instance of error where each property will be tested for strict deep equality including the non-enumerable <code>message</code> and <code>name</code> properties.\nWhen using an object, it is also possible to use a regular expression, when validating against a string property. See below for examples.</p>\n<p>If specified, <code>message</code> will be appended to the message provided by the AssertionError if the fn call fails to throw or in case the error validation fails.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fn","summary":"<p>function to invoke</p>\n","type":"Function"},{"name":"error","summary":"<p>The expected <code>Error</code> type (class or name)</p>\n","type":["RegExp","Function"],"optional":true},{"name":"message","summary":"<p>error message</p>\n","type":"String","optional":true}],"returns":{"type":"void"}}],"properties":[{"name":"AssertionError","summary":"<p>extension of <code>Error</code></p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"assert.AssertionError"},{"name":"strict","summary":"<p>an alias of <code>assert</code> that enforces strict version of comparison methods</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"assert.strict"}],"events":[],"constants":[]}
