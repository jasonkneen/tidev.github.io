{"name":"util","summary":"<p>A Node.js-compatible implementation of the core <code>util</code> module</p>\n","extends":"Object","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"pseudo","editUrl":"https://github.com/appcelerator/titanium_mobile/edit/master/apidoc/NodeJS/util.yml","methods":[{"name":"callbackify","summary":"<p>Takes an <code>async</code> function (or a function that returns a <code>Promise</code>) and returns a function following the error-first callback style, i.e. taking an <code>(err, value) =&gt; ... callback</code> as the last argument. In the callback, the first argument will be the rejection reason (or <code>null</code> if the <code>Promise</code> resolved), and the second argument will be the resolved value.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"original","summary":"<p>An <code>async</code> function</p>\n","type":"Function"}],"returns":{"summary":"<p>a callback style function</p>\n","type":"Function"}},{"name":"debug","summary":"<p>Alias for <code>util.debuglog</code>. Usage allows for readability of that doesn't imply logging when only using <code>util.debuglog().enabled</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"section","summary":"<p>A string identifying the portion of the application for which the <code>debuglog</code> function is being created.</p>\n","type":"String"},{"name":"callback","summary":"<p>A callback invoked the first time the logging function is called with a function argument that is a more optimized logging function.</p>\n","type":"Function","optional":true}],"returns":{"summary":"<p>The logging function</p>\n","type":"Function"}},{"name":"debuglog","summary":"<p>The <code>util.debuglog()</code> method is used to create a function that conditionally writes debug messages to <code>stderr</code> based on the existence of the <code>NODE_DEBUG</code> environment variable. If the section name appears within the value of that environment variable, then the returned function operates similar to <code>console.error()</code>. If not, then the returned function is a no-op.</p>\n<p><strong>NOTE:</strong> Titanium currently returns a no-op regardless of the <code>NODE_DEBUG</code> environment variable.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"section","summary":"<p>A string identifying the portion of the application for which the <code>debuglog</code> function is being created.</p>\n","type":"String"},{"name":"callback","summary":"<p>A callback invoked the first time the logging function is called with a function argument that is a more optimized logging function.</p>\n","type":"Function","optional":true}],"returns":{"summary":"<p>The logging function</p>\n","type":"Function"}},{"name":"deprecate","summary":"<p>The <code>util.deprecate()</code> method wraps fn (which may be a function or class) in such a way that it is marked as deprecated.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fn","summary":"<p>The function that is being deprecated.</p>\n","type":"Function"},{"name":"msg","summary":"<p>A warning message to display when the deprecated function is invoked.</p>\n","type":"String"},{"name":"code","summary":"<p>A deprecation code. <strong>NOTE:</strong> Titanium currently ignores this argument.</p>\n","type":"String","optional":true}],"returns":{"summary":"<p>The deprecated function wrapped to emit a warning.</p>\n","type":"Function"}},{"name":"format","summary":"<p>The <code>util.format()</code> method returns a formatted string using the first argument as a printf-like format string which can contain zero or more format specifiers. Each specifier is replaced with the converted value from the corresponding argument.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"format","summary":"<p>A <code>printf</code>-like format string.</p>\n","type":"String"},{"name":"args","summary":"<p>variable arguments to inject into the formatted string</p>\n","type":"any","optional":true,"repeatable":true}],"returns":{"type":"void"}},{"name":"formatWithOptions","summary":"<p>This function is identical to <code>util.format()</code>, except in that it takes an <code>inspectOptions</code> argument which specifies options that are passed along to <code>util.inspect()</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"inspectOptions","summary":"<p>Options passed along to <a href=\"/api/structs/util.html#inspect\">inspect</a><code>()</code></p>\n","type":"UtilInspectOptions"},{"name":"format","summary":"<p>A <code>printf</code>-like format string.</p>\n","type":"String"}],"returns":{"type":"void"}},{"name":"inherits","summary":"<p>Usage of <code>util.inherits()</code> is discouraged. Please use the ES6 <code>class</code> and <code>extends</code> keywords to get language level inheritance support. Also note that the two styles are semantically incompatible.</p>\n<p>Inherit the prototype methods from one constructor into another. The prototype of <code>constructor</code> will be set to a new object created from <code>superConstructor</code>.</p>\n<p>This mainly adds some input validation on top of <code>Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)</code>. As an additional convenience, <code>superConstructor</code> will be accessible through the <code>constructor.super_</code> property.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"constructor","summary":"<p>constructor function for &quot;subclass&quot;</p>\n","type":"Function"},{"name":"superConstructor","summary":"<p>constructor function for &quot;super class&quot;</p>\n","type":"Function"}],"returns":{"type":"void"}},{"name":"inspect","summary":"<p>The <code>util.inspect()</code> method returns a string representation of <code>object</code> that is intended for debugging. The output of <code>util.inspect</code> may change at any time and should not be depended upon programmatically. Additional <code>options</code> may be passed that alter the result. <code>util.inspect()</code> will use the constructor's name and/or <code>@@toStringTag</code> to make an identifiable tag for an inspected <code>value</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>Any JavaScript primitive or Object.</p>\n","type":"any"},{"name":"options","summary":"<p>Additional options to modify the output of the inspect function</p>\n","type":"UtilInspectOptions","optional":true}],"returns":{"type":"String"}},{"name":"isArray","summary":"<p>Alias for <code>Array.isArray()</code>.</p>\n<p>Returns <code>true</code> if the given <code>object</code> is an <code>Array</code>. Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"isBoolean","summary":"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Boolean</code>. Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"isBuffer","summary":"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Buffer</code>. Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"isDate","summary":"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Date</code>. Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"isError","summary":"<p>Returns <code>true</code> if the given <code>object</code> is an <code>Error</code>. Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"isFunction","summary":"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Function</code>. Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"isNull","summary":"<p>Returns <code>true</code> if the given <code>object</code> is strictly <code>null</code>. Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"isNullOrUndefined","summary":"<p>Returns <code>true</code> if the given <code>object</code> is <code>null</code> or <code>undefined</code>. Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"isNumber","summary":"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Number</code>. Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"isObject","summary":"<p>Returns <code>true</code> if the given <code>object</code> is strictly an <code>Object</code> <strong>and</strong> not a <code>Function</code> (even though functions are objects in JavaScript). Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"isPrimitive","summary":"<p>Returns <code>true</code> if the given <code>object</code> is a primitive type. Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"isRegExp","summary":"<p>Returns <code>true</code> if the given <code>object</code> is a <code>RegExp</code>. Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"isString","summary":"<p>Returns <code>true</code> if the given <code>object</code> is a <code>string</code>. Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"isSymbol","summary":"<p>Returns <code>true</code> if the given <code>object</code> is a <code>Symbol</code>. Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"isUndefined","summary":"<p>Returns <code>true</code> if the given <code>object</code> is <code>undefined</code>. Otherwise, returns <code>false</code>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"object","summary":"<p>any value</p>\n","type":"any"}],"returns":{"type":"Boolean"}},{"name":"log","summary":"<p>The <code>util.log()</code> method prints the given <code>string</code> to <code>stdout</code> with an included timestamp.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"string","summary":"<p>string to print</p>\n","type":"String"}],"returns":{"type":"void"}},{"name":"promisify","summary":"<p>Takes a function following the common error-first callback style, i.e. taking an <code>(err, value) =&gt; ... callback</code> as the last argument, and returns a version that returns promises.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"original","summary":"<p>A typical Node.js style callback function</p>\n","type":"Function"}],"returns":{"summary":"<p>a function that returns a <code>Promise</code></p>\n","type":"Function"}}],"properties":[{"name":"types","summary":"<p><code>util.types</code> provides type checks for different kinds of built-in objects. Unlike <code>instanceof</code> or <code>Object.prototype.toString.call(value)</code>, these checks do not inspect properties of the object that are accessible from JavaScript (like their prototype), and usually have the overhead of calling into C++.</p>\n<p>The result generally does not make any guarantees about what kinds of properties or behavior a value exposes in JavaScript. They are primarily useful for addon developers who prefer to do type checking in JavaScript.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"util.types"}],"events":[],"constants":[]}
