{"name":"Titanium.Codec","summary":"<p>A module for translating between primitive types and raw byte streams.</p>\n","extends":"Titanium.Module","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"module","editUrl":"https://github.com/appcelerator/titanium_mobile/edit/master/apidoc/Titanium/Codec/Codec.yml","methods":[{"name":"decodeNumber","summary":"<p>Decodes a number from the <code>source</code> buffer using the specified data type.</p>\n","description":"<p>Takes a set of named parameters in the <code>options</code> argument.</p>\n<p>Bytes are read from  the <code>source</code> buffer and decoded as the specified data type, <code>type</code>.</p>\n<p>Two optional parameters can also be specified in <code>options</code>:</p>\n<ul>\n<li>\n<p>If <code>position</code> is included in the <code>options</code> dictionary, reads data from the\nbuffer starting at <code>position</code>.</p>\n</li>\n<li>\n<p>If <code>byteOrder</code> is included in the <code>options</code> dictionary, the specified byte order\nis used -- otherwise, the native byte order is assumed.</p>\n</li>\n</ul>\n<p>Throws an exception if <code>source</code> is null, or <code>position</code> is greater than <code>source.length</code></p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"examples":"<h4 id=\"examples\"><a class=\"header-anchor\" href=\"#examples\">#</a> Examples</h4>\n<h5 id=\"decode-a-double-precision-floating-point-number\"><a class=\"header-anchor\" href=\"#decode-a-double-precision-floating-point-number\">#</a> Decode a Double-Precision Floating Point Number</h5>\n<p>This sample decodes an 8-byte double-precision floating point number using the\nOS byte order.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> buffer <span class=\"token operator\">=</span> <span class=\"token comment\">// a buffer containing (at least) one 8-byte floating-point number</span>\n<span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> Ti<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token function\">decodeNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    source<span class=\"token operator\">:</span> buffer<span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> Ti<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE_DOUBLE</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"decode-an-integer-specifying-start-position-and-byte-order\"><a class=\"header-anchor\" href=\"#decode-an-integer-specifying-start-position-and-byte-order\">#</a> Decode an Integer Specifying Start Position and Byte Order</h5>\n<p>This sample decodes a 4-byte integer starting at index position 10 in the\nbuffer, using big endian encoding.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> buffer <span class=\"token operator\">=</span> <span class=\"token comment\">// a buffer containing a 4-byte integer at position 10.</span>\n<span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> Ti<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token function\">decodeNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      source<span class=\"token operator\">:</span> buffer<span class=\"token punctuation\">,</span>\n      position<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n      type<span class=\"token operator\">:</span> Ti<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE_INT</span><span class=\"token punctuation\">,</span>\n      byteOrder<span class=\"token operator\">:</span> Ti<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token constant\">BIG_ENDIAN</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->","parameters":[{"name":"options","summary":"<p>Named parameters.</p>\n","type":"DecodeNumberDict"}],"returns":{"summary":"<p>Number decoded from <code>source</code>.</p>\n","type":"Number"}},{"name":"decodeString","summary":"<p>Decodes the source buffer into a String using the supplied character set.</p>\n","description":"<p>Takes a set of named parameters in the <code>options</code> argument.</p>\n<p>Bytes are read from the <code>source</code> buffer and decoded as a string.</p>\n<p>Several optional parameters can also be specified in <code>options</code>:</p>\n<ul>\n<li>\n<p>If <code>position</code> is specified, bytes are read from <code>source</code> starting at <code>position</code>.</p>\n</li>\n<li>\n<p>If <code>length</code> is specified, no more than <code>length</code> bytes are read.</p>\n</li>\n<li>\n<p>If <code>charset</code> is specified, it determines the character encoding used to decode the\nstring. Otherwise, UTF-8 is assumed.</p>\n</li>\n</ul>\n<p>Throws an exception if <code>charset</code> is not a valid character set, <code>source</code> is null,\nor either <code>position</code>, <code>length</code>, or <code>position</code>+<code>length</code> is greater than <code>source.length</code>.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"examples":"<h4 id=\"examples\"><a class=\"header-anchor\" href=\"#examples\">#</a> Examples</h4>\n<h5 id=\"decode-a-string\"><a class=\"header-anchor\" href=\"#decode-a-string\">#</a> Decode a String</h5>\n<p>This sample decodes a string using the default character encoding.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> buffer <span class=\"token operator\">=</span> <span class=\"token comment\">// a buffer containing an encoded string</span>\n<span class=\"token keyword\">var</span> string <span class=\"token operator\">=</span> Ti<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token function\">decodeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> source<span class=\"token operator\">:</span> buffer <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"decode-a-string-with-a-specified-character-encoding\"><a class=\"header-anchor\" href=\"#decode-a-string-with-a-specified-character-encoding\">#</a> Decode a String with a Specified Character Encoding</h5>\n<p>This sample decodes a string using the UTF-16 character encoding.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> buffer <span class=\"token operator\">=</span> <span class=\"token comment\">// a buffer containing a UTF-16 encoded string</span>\n<span class=\"token keyword\">var</span> string <span class=\"token operator\">=</span> Ti<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token function\">decodeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  source<span class=\"token operator\">:</span> buffer<span class=\"token punctuation\">,</span>\n  charset<span class=\"token operator\">:</span> Ti<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token constant\">CHARSET_UTF16</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->","parameters":[{"name":"options","summary":"<p>Named parameters.</p>\n","type":"DecodeStringDict"}],"returns":{"summary":"<p>The decoded string</p>\n","type":"String"}},{"name":"encodeNumber","summary":"<p>Encodes a number and writes it to a buffer.</p>\n","description":"<p>Takes a set of named parameters passed in the <code>options</code> argument.</p>\n<p>Encodes the number <code>source</code> into <code>dest</code> using the passed in data <code>type</code>.</p>\n<p>Two optional parameters can also be specified in <code>options</code>:</p>\n<ul>\n<li>\n<p>If <code>position</code> is included in the <code>options</code> dictionary, writes the encoded number\nto the buffer starting at <code>position</code>.</p>\n</li>\n<li>\n<p>If <code>byteOrder</code> is included in the <code>options</code> dictionary, the specified byte order\nis used -- otherwise, the native byte order is assumed.</p>\n</li>\n</ul>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"examples":"<h4 id=\"examples\"><a class=\"header-anchor\" href=\"#examples\">#</a> Examples</h4>\n<h5 id=\"encode-a-double-precision-floating-point-value\"><a class=\"header-anchor\" href=\"#encode-a-double-precision-floating-point-value\">#</a> Encode a Double-Precision Floating Point Value</h5>\n<p>This example encodes a double-precision floating point value in 8 bytes using the OS byte\norder.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> buffer <span class=\"token operator\">=</span> Ti<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nTi<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token function\">encodeNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  source<span class=\"token operator\">:</span> <span class=\"token number\">1.23456789</span><span class=\"token punctuation\">,</span>\n  dest<span class=\"token operator\">:</span> buffer<span class=\"token punctuation\">,</span>\n  type<span class=\"token operator\">:</span> Ti<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE_DOUBLE</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"encode-an-integer-specifying-start-position-and-byte-order\"><a class=\"header-anchor\" href=\"#encode-an-integer-specifying-start-position-and-byte-order\">#</a> Encode an Integer Specifying Start Position and Byte Order</h5>\n<p>This example encodes a 4-byte integer using big endian encoding, and\nwrites it to the supplied buffer starting at index position 10.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> buffer <span class=\"token operator\">=</span> Ti<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nTi<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token function\">encodeNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    source<span class=\"token operator\">:</span> <span class=\"token number\">0x3456789a</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token operator\">:</span> buffer<span class=\"token punctuation\">,</span>\n    position<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> Ti<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE_INT</span><span class=\"token punctuation\">,</span>\n    byteOrder<span class=\"token operator\">:</span> Ti<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token constant\">BIG_ENDIAN</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->","parameters":[{"name":"options","summary":"<p>Named parameters.</p>\n","type":"EncodeNumberDict"}],"returns":{"summary":"<p>Position <em>after</em> the encoded number in <code>dest</code>.</p>\n","type":"Number"}},{"name":"encodeString","summary":"<p>Encodes a string into a series of bytes in a buffer using the specified character set.</p>\n","description":"<p>Takes a set of named parameters in the <code>options</code> argument.</p>\n<p>The string is read from <code>source</code> and written to the buffer <code>dest</code>.</p>\n<p>Several optional parameters can also be specified in <code>options</code>:</p>\n<ul>\n<li>\n<p>If <code>charset</code> is included, the string is encoded using the specified character\nencoding.</p>\n</li>\n<li>\n<p>If <code>destPosition</code> is included, data is written into the buffer starting at\nthe specified position.</p>\n</li>\n<li>\n<p>If <code>sourcePosition</code> is included, a substring of the source string starting at the\nspecified position is encoded.</p>\n</li>\n<li>\n<p>If <code>sourceLength</code> is included, at most the specified numer of characters\nare encoded.</p>\n</li>\n</ul>\n<p>Throws an exception if <code>charset</code> is not a valid character set,\n<code>source</code> is null, or either <code>sourcePosition</code>, <code>sourceLength</code>, or\n<code>sourcePosition</code>+<code>sourceLength</code> is greater than <code>source.length</code>.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"examples":"<h4 id=\"examples\"><a class=\"header-anchor\" href=\"#examples\">#</a> Examples</h4>\n<h5 id=\"encode-string-with-default-character-encoding\"><a class=\"header-anchor\" href=\"#encode-string-with-default-character-encoding\">#</a> Encode String with Default Character Encoding</h5>\n<p>This sample encodes a string using the default character encoding (UTF-8), then trims the\nbuffer to the length of the encoded string.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> buffer <span class=\"token operator\">=</span> Ti<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> <span class=\"token number\">1024</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> length <span class=\"token operator\">=</span> Ti<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token function\">encodeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    source<span class=\"token operator\">:</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token operator\">:</span> buffer\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuffer<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"encode-substring-with-specified-character-encoding\"><a class=\"header-anchor\" href=\"#encode-substring-with-specified-character-encoding\">#</a> Encode Substring with Specified Character Encoding</h5>\n<p>This sample encodes the first 10 characters of a string using UTF-16 character encoding.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// (10 * 2) + BOM = 22</span>\n<span class=\"token keyword\">var</span> buffer <span class=\"token operator\">=</span> Ti<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> <span class=\"token number\">22</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nTi<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token function\">encodeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    source<span class=\"token operator\">:</span> <span class=\"token string\">\"jack jumped over the candle stick\"</span><span class=\"token punctuation\">,</span>\n    sourceLength<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token operator\">:</span> buffer<span class=\"token punctuation\">,</span>\n    charset<span class=\"token operator\">:</span> Ti<span class=\"token punctuation\">.</span>Codec<span class=\"token punctuation\">.</span><span class=\"token constant\">CHARSET_UTF16</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->","parameters":[{"name":"options","summary":"<p>Named parameters.</p>\n","type":"Dictionary<EncodeStringDict>"}],"returns":{"summary":"<p>An index indicating the first byte in the destination buffer <em>after</em> the\nencoded string.</p>\n","type":"Number"}},{"name":"getNativeByteOrder","summary":"<p>Get the OS native byte order (either <a href=\"/api/titanium/codec.html#big_endian\">BIG_ENDIAN</a> or\n<a href=\"/api/titanium/codec.html#little_endian\">LITTLE_ENDIAN</a>).</p>\n","description":"<p>See &quot;Byte Order&quot; in the main discussion of <a href=\"/api/titanium/codec.html\">Titanium.Codec</a> for more information.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"returns":{"summary":"<p>OS native byte order.</p>\n","type":"Number"}}],"properties":[],"events":[],"constants":[{"name":"BIG_ENDIAN","summary":"<p>Big endian (network) byte order -- that is, the most significant byte first.</p>\n","description":"<p>See &quot;Byte Order&quot; in the main discussion of <a href=\"/api/titanium/codec.html\">Titanium.Codec</a> for more information.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"Number","permission":"read-only"},{"name":"CHARSET_ASCII","summary":"<p>ASCII character encoding..</p>\n","description":"<p>See also: <a href=\"http://en.wikipedia.org/wiki/ASCII\">ASCII</a> on Wikipedia.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"String","permission":"read-only","value":"ascii"},{"name":"CHARSET_ISO_LATIN_1","summary":"<p>ISO 8859-1 (Latin-1) character encoding.</p>\n","description":"<p>See also: <a href=\"http://en.wikipedia.org/wiki/ISO/IEC_8859-1\">ISO/IEC 8859-1</a> on Wikipedia.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"String","permission":"read-only","value":"latin1"},{"name":"CHARSET_UTF16","summary":"<p>UTF-16 character encoding with default byte order.</p>\n","description":"<p>See also: <a href=\"http://en.wikipedia.org/wiki/UTF-16/UCS-2\">UTF-16/UCS2</a> on Wikipedia.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"String","permission":"read-only","value":"utf16"},{"name":"CHARSET_UTF16BE","summary":"<p>UTF-16 character encoding with big endian byte order.</p>\n","description":"<p>See also: <a href=\"http://en.wikipedia.org/wiki/UTF-16/UCS-2\">UTF-16/UCS2</a> on Wikipedia.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"String","permission":"read-only","value":"utf16be"},{"name":"CHARSET_UTF16LE","summary":"<p>UTF-16 character encoding with little endian byte order.</p>\n","description":"<p>See also: <a href=\"http://en.wikipedia.org/wiki/UTF-16/UCS-2\">UTF-16/UCS2</a> on Wikipedia.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"String","permission":"read-only","value":"utf16le"},{"name":"CHARSET_UTF8","summary":"<p>UTF-8 character encoding.</p>\n","description":"<p>See also: <a href=\"http://en.wikipedia.org/wiki/UTF-8\">UTF-8</a> on Wikipedia.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"String","permission":"read-only","value":"utf8"},{"name":"LITTLE_ENDIAN","summary":"<p>Little endian byte order -- that is, the least significant byte first.</p>\n","description":"<p>See &quot;Byte Order&quot; in the main discussion of <a href=\"/api/titanium/codec.html\">Titanium.Codec</a> for more information.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"Number","permission":"read-only"},{"name":"TYPE_BYTE","summary":"<p>8-bit integer encoding type.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"String","permission":"read-only","value":"byte"},{"name":"TYPE_DOUBLE","summary":"<p>64-bit double precision floating-point type.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"String","permission":"read-only","value":"double"},{"name":"TYPE_FLOAT","summary":"<p>32-bit single precision floating-point type.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"String","permission":"read-only","value":"float"},{"name":"TYPE_INT","summary":"<p>32-bit integer encoding type.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"String","permission":"read-only","value":"int"},{"name":"TYPE_LONG","summary":"<p>64-bit integer encoding type.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"String","permission":"read-only","value":"long"},{"name":"TYPE_SHORT","summary":"<p>16-bit integer encoding type.</p>\n","platforms":[{"since":"1.7","name":"android"},{"since":"1.7","name":"iphone"},{"since":"1.7","name":"ipad"},{"since":"9.2.0","name":"macos"},{"since":"4.1.0","name":"windowsphone"}],"type":"String","permission":"read-only","value":"short"}]}
