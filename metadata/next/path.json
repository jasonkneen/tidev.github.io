{"name":"path","summary":"<p>A Node.js-compatible implementation of the core <code>path</code> module</p>\n","extends":"Object","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"pseudo","editUrl":"https://github.com/appcelerator/titanium_mobile/edit/master/apidoc/NodeJS/path.yml","methods":[{"name":"basename","summary":"<p>The <code>path.basename()</code> method returns the last portion of a <code>path</code>, similar to the Unix <code>basename</code> command. Trailing directory separators are ignored, see <a href=\"/api/structs/path.html#sep\">sep</a>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>The file path.</p>\n","type":"String"},{"name":"ext","summary":"<p>An optional file extension</p>\n","type":"String","optional":true}],"returns":{"type":"String"}},{"name":"dirname","summary":"<p>The <code>path.dirname()</code> method returns the directory name of a <code>path</code>, similar to the Unix <code>dirname</code> command. Trailing directory separators are ignored, see <a href=\"/api/structs/path.html#sep\">sep</a>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>The file path.</p>\n","type":"String"}],"returns":{"type":"String"}},{"name":"extname","summary":"<p>The <code>path.extname()</code> method returns the extension of the <code>path</code>, from the last occurrence of the <code>.</code> (period) character to end of string in the last portion of the path. If there is no <code>.</code> in the last portion of the path, or if there are no <code>.</code> characters other than the first character of the <code>basename</code> of <code>path</code> (see <a href=\"/api/structs/path.html#basename\">basename</a><code>()</code>) , an empty string is returned.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>The file path.</p>\n","type":"String"}],"returns":{"type":"String"}},{"name":"format","summary":"<p>The <code>path.format()</code> method returns a <code>path</code> string from an object. This is the opposite of <a href=\"/api/structs/path.html#parse\">parse</a><code>()</code>.</p>\n<p>When providing properties to the <code>pathObject</code> remember that there are combinations where one property has priority over another:</p>\n<p><code>pathObject.root</code> is ignored if <code>pathObject.dir</code> is provided\n<code>pathObject.ext</code> and <code>pathObject.name</code> are ignored if <code>pathObject.base</code> exists</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"pathObject","summary":"<p>The file path.</p>\n","type":"PathObject"}],"returns":{"type":"String"}},{"name":"isAbsolute","summary":"<p>The <code>path.isAbsolute()</code> method determines if <code>path</code> is an absolute path.</p>\n<p>If the given <code>path</code> is a zero-length string, <code>false</code> will be returned.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>The file path.</p>\n","type":"String"}],"returns":{"type":"Boolean"}},{"name":"join","summary":"<p>The <code>path.join()</code> method joins all given <code>path</code> segments together using the platform-specific separator as a delimiter, then normalizes the resulting path.</p>\n<p>Zero-length <code>path</code> segments are ignored. If the joined path string is a zero-length string then <code>'.'</code> will be returned, representing the current working directory.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"paths","summary":"<p>A sequence of path segments</p>\n","type":"String","optional":true,"repeatable":true}],"returns":{"type":"String"}},{"name":"normalize","summary":"<p>The <code>path.normalize()</code> method normalizes the given <code>path</code>, resolving <code>'..'</code> and <code>'.'</code> segments.</p>\n","description":"<p>When multiple, sequential path segment separation characters are found (e.g. <code>/</code> on POSIX and either <code>\\</code> or <code>/</code> on Windows), they are replaced by a single instance of the platform-specific path segment separator (<code>/</code> on POSIX and <code>\\</code> on Windows). Trailing separators are preserved.</p>\n<p>If the <code>path</code> is a zero-length string, <code>'.'</code> is returned, representing the current working directory.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>The file path.</p>\n","type":"String"}],"returns":{"type":"String"}},{"name":"parse","summary":"<p>The <code>path.parse()</code> method returns an object whose properties represent significant elements of the <code>path</code>. Trailing directory separators are ignored, see <a href=\"/api/structs/path.html#sep\">sep</a>.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>The file path.</p>\n","type":"String"}],"returns":{"type":"PathObject"}},{"name":"relative","summary":"<p>The <code>path.relative()</code> method returns the relative path from from to to based on the current working directory. If <code>from</code> and <code>to</code> each resolve to the same path (after calling <code>path.resolve()</code> on each), a zero-length string is returned.</p>\n<p>If a zero-length string is passed as <code>from</code> or <code>to</code>, the current working directory will be used instead of the zero-length strings.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"from","summary":"<p>The source file path.</p>\n","type":"String"},{"name":"to","summary":"<p>The destination file path.</p>\n","type":"String"}],"returns":{"type":"String"}},{"name":"resolve","summary":"<p>The <code>path.resolve()</code> method resolves a sequence of paths or path segments into an absolute path.</p>\n","description":"<p>The given sequence of paths is processed from right to left, with each subsequent <code>path</code> prepended until an absolute path is constructed. For instance, given the sequence of path segments: <code>/foo</code>, <code>/bar</code>, <code>baz</code>, calling <code>path.resolve('/foo', '/bar', 'baz')</code> would return <code>/bar/baz</code> because <code>'baz'</code> is not an absolute path but <code>'/bar' + '/' + 'baz'</code> is.</p>\n<p>If, after processing all given <code>path</code> segments, an absolute path has not yet been generated, the current working directory is used.</p>\n<p>The resulting path is normalized and trailing slashes are removed unless the path is resolved to the root directory.</p>\n<p>Zero-length <code>path</code> segments are ignored.</p>\n<p>If no <code>path</code> segments are passed, <code>path.resolve()</code> will return the absolute path of the current working directory.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"paths","summary":"<p>A sequence of paths or path segments</p>\n","type":"String","optional":true,"repeatable":true}],"returns":{"type":"String"}},{"name":"toNamespacedPath","summary":"<p>On Windows systems only, returns an equivalent namespace-prefixed path for the given <code>path</code>. If <code>path</code> is not a string, <code>path</code> will be returned without modifications.</p>\n<p>This method is meaningful only on Windows systems. On POSIX systems, the method is non-operational and always returns <code>path</code> without modifications.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>The file path.</p>\n","type":"String"}],"returns":{"type":"String"}}],"properties":[{"name":"delimiter","summary":"<p>Provides the platform-specific path delimiter:</p>\n<p><code>;</code> for Windows\n<code>:</code> for POSIX</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"String"},{"name":"posix","summary":"<p>The <code>path.posix</code> property provides access to POSIX specific implementations of the <code>path</code> methods.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"path"},{"name":"sep","summary":"<p>Provides the platform-specific path segment separator:</p>\n<ul>\n<li><code>\\</code> on Windows</li>\n<li><code>/</code> on POSIX</li>\n</ul>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"String"},{"name":"win32","summary":"<p>The <code>path.win32</code> property provides access to Windows-specific implementations of the <code>path</code> methods.</p>\n","platforms":[{"since":"8.1.0","name":"android"},{"since":"8.1.0","name":"iphone"},{"since":"8.1.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"path"}],"events":[],"constants":[]}
