{"name":"fs","summary":"<p>A Node.js-compatible implementation of the core <code>fs</code> module</p>\n","extends":"Object","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"pseudo","editUrl":"https://github.com/appcelerator/titanium_mobile/edit/master/apidoc/NodeJS/fs.yml","methods":[{"name":"access","summary":"<p>Tests a user's permissions for the file or directory specified by <code>path</code>.\nThe <code>mode</code> argument is an optional integer that specifies the accessibility checks to be performed.\nCheck File access constants for possible values of <code>mode</code>.\nIt is possible to create a mask consisting of the bitwise OR of two or more values (e.g. <code>fs.constants.W_OK | fs.constants.R_OK</code>).</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>filepath</p>\n","type":["String","buffer.Buffer"]},{"name":"mode","summary":"<p>mode/permissions to check</p>\n","type":"Number","optional":true},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"accessSync","summary":"<p>Synchronously tests a user's permissions for the file or directory specified by <code>path</code>.\nThe <code>mode</code> argument is an optional integer that specifies the accessibility checks to be performed.\nCheck File access constants for possible values of <code>mode</code>.\nIt is possible to create a mask consisting of the bitwise OR of two or more values (e.g. <code>fs.constants.W_OK | fs.constants.R_OK</code>).</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>filepath</p>\n","type":["String","buffer.Buffer"]},{"name":"mode","summary":"<p>mode/permissions to check</p>\n","type":"Number","optional":true}],"returns":{"type":"void"}},{"name":"appendFile","summary":"<p>Asynchronously append <code>data</code> to a file, creating the file if it does not yet exist. <code>data</code> can be a <code>string</code> or a <a href=\"/api/structs/buffer/buffer.html\">buffer.Buffer</a>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>filepath or file descriptor</p>\n","type":["String","buffer.Buffer","Number"]},{"name":"data","summary":"<p>data to append</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":["fs.appendFile.options","String"],"optional":true},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"appendFileSync","summary":"<p>Synchronously append <code>data</code> to a file, creating the file if it does not yet exist. <code>data</code> can be a <code>string</code> or a <a href=\"/api/structs/buffer/buffer.html\">buffer.Buffer</a>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>filepath or file descriptor</p>\n","type":["String","buffer.Buffer","Number"]},{"name":"data","summary":"<p>data to append</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":["fs.appendFile.options","String"],"optional":true}],"returns":{"type":"void"}},{"name":"chmod","summary":"<p>Asynchronously changes the permissions of a file. No arguments other than a possible exception are given to the completion callback.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>filepath</p>\n","type":["String","buffer.Buffer"]},{"name":"mode","summary":"<p>new mode/permissions</p>\n","type":["String","Number"]},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"chmodSync","summary":"<p>Synchronously changes the permissions of a file.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>filepath</p>\n","type":["String","buffer.Buffer"]},{"name":"mode","summary":"<p>new mode/permissions</p>\n","type":["String","Number"]}],"returns":{"type":"void"}},{"name":"chown","summary":"<p>Asynchronously changes owner and group of a file. No arguments other than a possible exception are given to the completion callback.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>filepath</p>\n","type":["String","buffer.Buffer"]},{"name":"uid","summary":"<p>new owner</p>\n","type":"Number"},{"name":"gid","summary":"<p>new group</p>\n","type":"Number"},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"chownSync","summary":"<p>Synchronously changes owner and group of a file.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>filepath</p>\n","type":["String","buffer.Buffer"]},{"name":"uid","summary":"<p>new owner</p>\n","type":"Number"},{"name":"gid","summary":"<p>new group</p>\n","type":"Number"}],"returns":{"type":"void"}},{"name":"close","summary":"<p>Asynchronous <code>close</code>. No arguments other than a possible exception are given to the completion <code>callback</code>.</p>\n<p>Calling <code>fs.close()</code> on any file descriptor (<code>fd</code>) that is currently in use through any other fs operation may lead to undefined behavior.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fd","summary":"<p>file descriptor</p>\n","type":"Number"},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"closeSync","summary":"<p>Synchronous <code>close</code>.</p>\n<p>Calling <code>fs.close()</code> on any file descriptor (<code>fd</code>) that is currently in use through any other fs operation may lead to undefined behavior.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fd","summary":"<p>file descriptor</p>\n","type":"Number"}],"returns":{"type":"void"}},{"name":"copyFile","summary":"<p>Asynchronously copies <code>src</code> to <code>dest</code>. By default, <code>dest</code> is overwritten if it already exists. No arguments other than a possible exception are given to the callback function. Node.js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.js will attempt to remove the destination.</p>\n<p><code>mode</code> is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. <code>fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE</code>).</p>\n<ul>\n<li><code>fs.constants.COPYFILE_EXCL</code>: The copy operation will fail if dest already exists.</li>\n<li><code>fs.constants.COPYFILE_FICLONE</code>: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used.</li>\n<li><code>fs.constants.COPYFILE_FICLONE_FORCE</code>: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.</li>\n</ul>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"src","summary":"<p>source filename to copy</p>\n","type":"String"},{"name":"dest","summary":"<p>destination filename of the copy operation</p>\n","type":"String"},{"name":"mode","summary":"<p>modifiers for copy operation.</p>\n","type":"Number","optional":true},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"copyFileSync","summary":"<p>Synchronously copies <code>src</code> to <code>dest</code>. By default, <code>dest</code> is overwritten if it already exists. Node.js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.js will attempt to remove the destination.</p>\n<p><code>mode</code> is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. <code>fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE</code>).</p>\n<ul>\n<li><code>fs.constants.COPYFILE_EXCL</code>: The copy operation will fail if dest already exists.</li>\n<li><code>fs.constants.COPYFILE_FICLONE</code>: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used.</li>\n<li><code>fs.constants.COPYFILE_FICLONE_FORCE</code>: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.</li>\n</ul>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"src","summary":"<p>source filename to copy</p>\n","type":"String"},{"name":"dest","summary":"<p>destination filename of the copy operation</p>\n","type":"String"},{"name":"mode","summary":"<p>modifiers for copy operation.</p>\n","type":"Number","optional":true}],"returns":{"type":"void"}},{"name":"exists","summary":"<p>Test whether or not the given path exists by checking with the file system.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"callback","summary":"<p>atypical async callback function that received the result as a single boolean arguments</p>\n","type":"Function<Boolean>"}],"returns":{"type":"void"}},{"name":"existsSync(path)","summary":"<p>Test whether or not the given path exists by checking with the file system.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]}],"returns":{"type":"Boolean"}},{"name":"fchmod","summary":"<p>Asynchronous <code>fchmod</code>.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fd","summary":"<p>file descriptor</p>\n","type":"Number"},{"name":"mode","summary":"<p>new mode/permissions</p>\n","type":["String","Number"]},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"fchmodSync","summary":"<p>Synchronous <code>fchmod</code>.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fd","summary":"<p>file descriptor</p>\n","type":"Number"},{"name":"mode","summary":"<p>new mode/permissions</p>\n","type":["String","Number"]}],"returns":{"type":"void"}},{"name":"fchown","summary":"<p>Asynchronous <code>fchown</code>.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fd","summary":"<p>file descriptor</p>\n","type":"Number"},{"name":"uid","summary":"<p>new owner</p>\n","type":"Number"},{"name":"gid","summary":"<p>new group</p>\n","type":"Number"},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"fchownSync","summary":"<p>Synchronous <code>fchown</code>.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fd","summary":"<p>file descriptor</p>\n","type":"Number"},{"name":"uid","summary":"<p>new owner</p>\n","type":"Number"},{"name":"gid","summary":"<p>new group</p>\n","type":"Number"}],"returns":{"type":"void"}},{"name":"fdatasync","summary":"<p>Asynchronous <code>fdatasync</code>.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fd","summary":"<p>file descriptor</p>\n","type":"Number"},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"fdatasyncSync","summary":"<p>Synchronous <code>fdatasync</code>.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fd","summary":"<p>file descriptor</p>\n","type":"Number"}],"returns":{"type":"void"}},{"name":"fstat","summary":"<p>Asynchronous <code>fstat</code>.\nThe <code>callback</code> gets two arguments <code>(err, stats)</code> where <code>stats</code> is an <a href=\"/api/structs/fs/stats.html\">fs.Stats</a> object.\n<code>fstat()</code> is identical to <code>stat()</code>, except that the file to be stat-ed is specified by the file descriptor <code>fd</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fd","summary":"<p>file descriptor</p>\n","type":"Number"},{"name":"options","summary":"<p>options</p>\n","type":"fs.stat.options","optional":true},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error, fs.Stats>"}],"returns":{"type":"void"}},{"name":"fstatSync","summary":"<p>Synchronous <code>fstat</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fd","summary":"<p>file descriptor</p>\n","type":"Number"},{"name":"options","summary":"<p>options</p>\n","type":"fs.stat.options","optional":true}],"returns":{"type":"fs.Stats"}},{"name":"lstat","summary":"<p>Asynchronous <code>lstat</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"fs.stat.options","optional":true},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error, fs.Stats>"}],"returns":{"type":"void"}},{"name":"lstatSync","summary":"<p>Synchronous <code>lstat</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"fs.stat.options","optional":true}],"returns":{"type":"fs.Stats"}},{"name":"mkdir","summary":"<p>Asynchronously creates a directory.</p>\n<p>The <code>callback</code> is given a possible exception and, if <code>recursive</code> is <code>true</code>, the first directory path created, <code>(err, [path])</code>.</p>\n<p>The optional <code>options</code> argument can be an integer specifying <code>mode</code> (permission and sticky bits), or an object with a <code>mode</code> property and a <code>recursive</code> property indicating whether parent directories should be created.\nCalling <code>fs.mkdir()</code> when <code>path</code> is a directory that exists results in an error only when <code>recursive</code> is <code>false</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"fs.mkdir.options","optional":true},{"name":"callback","summary":"<p>typical async callback function. The second argument is an optional path <code>string</code>.</p>\n","type":"Function<Error, String>"}],"returns":{"type":"void"}},{"name":"mkdirSync","summary":"<p>Synchronously creates a directory.\nReturns <code>undefined</code>, or if <code>recursive is</code>true<code>, the first directory path created. This is the synchronous version of</code>fs.mkdir()`.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"fs.mkdir.options","optional":true}],"returns":{"summary":"<p>will return <code>undefined</code> if <code>recursive</code> option is not <code>true</code></p>\n","type":"String"}},{"name":"mkdtemp","summary":"<p>Creates a unique temporary directory.</p>\n<p>Generates six random characters to be appended behind a required <code>prefix</code> to create a unique temporary directory. Due to platform inconsistencies, avoid trailing <code>X</code> characters in <code>prefix</code>. Some platforms, notably the BSDs, can return more than six random characters, and replace trailing <code>X</code> characters in <code>prefix</code> with random characters.</p>\n<p>The created directory path is passed as a string to the <code>callback</code>'s second parameter.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an object with an <code>encoding</code> property specifying the character encoding to use.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"prefix","summary":"<p>file prefix</p>\n","type":"String"},{"name":"options","summary":"<p>encoding if <code>string</code></p>\n","type":["String","fs.mkdtemp.options"],"optional":true},{"name":"callback","summary":"<p>typical async callback function. The second argument is the generated path <code>string</code>.</p>\n","type":"Function<Error, String>"}],"returns":{"type":"void"}},{"name":"mkdtempSync","summary":"<p>For detailed information, see the documentation of the asynchronous version of this API: <a href=\"/api/structs/fs.html#mkdtemp\">mkdtemp</a>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an object with an <code>encoding</code> property specifying the character encoding to use.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"prefix","summary":"<p>file prefix</p>\n","type":"String"},{"name":"options","summary":"<p>encoding if <code>string</code></p>\n","type":["String","fs.mkdtemp.options"],"optional":true}],"returns":{"summary":"<p>Returns the created directory path.</p>\n","type":"String"}},{"name":"open","summary":"<p>Asynchronous file open. See open(2).</p>\n<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the file was created. On Windows, only the write permission can be manipulated; see fs.chmod().</p>\n<p>The <code>callback</code> gets two arguments <code>(err, fd)</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"flags","summary":"<p>file system flags</p>\n","type":["String","Number"],"optional":true},{"name":"mode","summary":"<p>file permissions</p>\n","type":["Number","String"],"optional":true},{"name":"callback","summary":"<p>typical async callback function, the second argument is an integer representing a file descriptor</p>\n","type":"Function<Error, Number>"}],"returns":{"type":"void"}},{"name":"openSync","summary":"<p>For detailed information, see the documentation of the asynchronous version of this API: <code>fs.open()</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"flags","summary":"<p>file system flags</p>\n","type":["String","Number"],"optional":true},{"name":"mode","summary":"<p>file permissions</p>\n","type":["Number","String"],"optional":true}],"returns":{"summary":"<p>Returns an integer representing the file descriptor.</p>\n","type":"Number"}},{"name":"read","summary":"<p>Read data from the file specified by fd.</p>\n<p><code>buffer</code> is the buffer that the data (read from the fd) will be written to.</p>\n<p><code>offset</code> is the offset in the buffer to start writing at.</p>\n<p><code>length</code> is an integer specifying the number of bytes to read.</p>\n<p><code>position</code> is an argument specifying where to begin reading from in the file. If position is <code>null</code>, data will be read from the current file position, and the file position will be updated. If position is an integer, the file position will remain unchanged.</p>\n<p>The <code>callback</code> is given the three arguments, <code>(err, bytesRead, buffer)</code>.</p>\n<p>If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fd","summary":"<p>file descriptor</p>\n","type":"Number"},{"name":"buffer","summary":"<p>buffer to read</p>\n","type":["buffer.Buffer","Titanium.Buffer"]},{"name":"offset","summary":"<p>the offset in the buffer to start writing at.</p>\n","type":"Number"},{"name":"length","summary":"<p>integer specifying the number of bytes to read.</p>\n","type":"Number"},{"name":"position","summary":"<p>where to begin reading from in the file. <em>Unused/unsupported in Titanium.</em></p>\n","type":"Number"},{"name":"callback","summary":"<p>async callback function</p>\n","type":"Function<Error, Number, buffer.Buffer>"}],"returns":{"type":"void"}},{"name":"readdir","summary":"<p>Asynchronous <code>readdir</code>. Reads the contents of a directory. The <code>callback</code> gets two arguments <code>(err, files)</code> where <code>files</code> is an array of the names of the files in the directory excluding <code>'.'</code> and <code>'..'</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the filenames passed to the callback. If the encoding is set to 'buffer', the filenames returned will be passed as Buffer objects.</p>\n<p>If <code>options.withFileTypes</code> is set to <code>true</code>, the <code>files</code> array will contain <code>fs.Dirent</code> objects. <strong>NOTE:</strong> Titanium does not yet support this.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"fs.readdir.options","optional":true},{"name":"callback","summary":"<p>Typical async callback function. The second argument is an array of results which may be <code>String</code>s, <a href=\"/api/structs/buffer/buffer.html\">buffer.Buffer</a>s, or <a href=\"/api/structs/fs/dirent.html\">fs.Dirent</a>s</p>\n","type":"Function<Error, Array<String>>"}],"returns":{"type":"void"}},{"name":"readdirSync","summary":"<p>Synchronous <code>readdir</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the filenames returned. If the encoding is set to 'buffer', the filenames returned will be passed as Buffer objects.</p>\n<p>If <code>options.withFileTypes</code> is set to <code>true</code>, the result will contain <code>fs.Dirent</code> objects. <strong>Note:</strong> Titanium does not yet support this.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"fs.readdir.options","optional":true}],"returns":{"summary":"<p>an array of results which may be <code>String</code>s, <a href=\"/api/structs/buffer/buffer.html\">buffer.Buffer</a>s, or <a href=\"/api/structs/fs/dirent.html\">fs.Dirent</a>s</p>\n","type":["Array<String>","Array<buffer.Buffer>","Array<fs.Dirent>"]}},{"name":"readFile","summary":"<p>Asynchronously reads the entire contents of a file.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>encoding <code>string</code>, or an options object</p>\n","type":["fs.readFile.options","String"],"optional":true},{"name":"callback","summary":"<p>typical async callback function, the second argument is either a <code>string</code> or a <a href=\"/api/structs/buffer/buffer.html\">buffer.Buffer</a></p>\n","type":"Function<Error, String>"}],"returns":{"type":"void"}},{"name":"readFileSync","summary":"<p>Synchronously reads the entire contents of a file.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>encoding <code>string</code>, or an options object</p>\n","type":["fs.readFile.options","String"],"optional":true}],"returns":{"summary":"<p>either a <code>string</code> or a <a href=\"/api/structs/buffer/buffer.html\">buffer.Buffer</a>, based upon <code>options.encoding</code></p>\n","type":["String","buffer.Buffer"]}},{"name":"readSync","summary":"<p>For detailed information, see the documentation of the asynchronous version of this API: <code>fs.read()</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fd","summary":"<p>file descriptor</p>\n","type":"Number"},{"name":"buffer","summary":"<p>buffer to read</p>\n","type":["buffer.Buffer","Titanium.Buffer"]},{"name":"offset","summary":"<p>the offset in the buffer to start writing at.</p>\n","type":"Number"},{"name":"length","summary":"<p>integer specifying the number of bytes to read.</p>\n","type":"Number"},{"name":"position","summary":"<p>where to begin reading from in the file. <em>Unused/unsupported in Titanium.</em></p>\n","type":"Number","optional":true}],"returns":{"summary":"<p>Returns the number of bytesRead.</p>\n","type":"Number"}},{"name":"realpath","summary":"<p>Asynchronously computes the canonical pathname by resolving <code>.</code>, <code>..</code> and symbolic links.</p>\n<p>A canonical pathname is not necessarily unique. Hard links and bind mounts can expose a file system entity through many pathnames.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"Object","optional":true},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error, String>"}],"returns":{"type":"void"}},{"name":"realpath.native","summary":"<p>Asynchronous <code>realpath</code>.</p>\n<p>The <code>callback</code> gets two arguments <code>(err, resolvedPath)</code>.</p>\n<p>Only paths that can be converted to UTF8 strings are supported.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the path passed to the callback. If the encoding is set to 'buffer', the path returned will be passed as a Buffer object.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"Object","optional":true},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error, String>"}],"returns":{"type":"void"}},{"name":"realpathSync","summary":"<p>Returns the resolved pathname.</p>\n<p>For detailed information, see the documentation of the asynchronous version of this API: <code>fs.realpath()</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"Object","optional":true}],"returns":{"type":"String"}},{"name":"realpathSync.native","summary":"<p>Synchronous <code>realpath</code>.</p>\n<p>Only paths that can be converted to UTF8 strings are supported.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"Object","optional":true}],"returns":{"type":"String"}},{"name":"rename","summary":"<p>Asynchronously rename file at <code>oldPath</code> to the pathname provided as <code>newPath</code>.\nIn the case that <code>newPath</code> already exists, it will be overwritten.\nIf there is a directory at <code>newPath</code>, an error will be raised instead.\nNo arguments other than a possible exception are given to the completion <code>callback</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"oldPath","summary":"<p>source file path</p>\n","type":["String","buffer.Buffer"]},{"name":"newPath","summary":"<p>destination file path</p>\n","type":["String","buffer.Buffer"]},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"renameSync","summary":"<p>Synchronous <code>rename</code>. Returns <code>undefined</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"oldPath","summary":"<p>source file path</p>\n","type":["String","buffer.Buffer"]},{"name":"newPath","summary":"<p>destination file path</p>\n","type":["String","buffer.Buffer"]}],"returns":{"type":"void"}},{"name":"rmdir","summary":"<p>Asynchronous <code>rmdir</code></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"fs.rmDir.options","optional":true},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"rmSync","summary":"<p>Synchronously removes files and directories (modeled on the standard POSIX <code>rm</code> utility). Returns <code>undefined</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"fs.rm.options","optional":true}],"returns":{"type":"void"}},{"name":"stat","summary":"<p>Asynchronous <code>stat</code>. The <code>callback</code> gets two arguments <code>(err, stats)</code> where <code>stats</code> is an <a href=\"/api/structs/fs/stats.html\">fs.Stats</a> object.</p>\n<p>In case of an error, the <code>err.code</code> will be one of Common System Errors.</p>\n<p>Using <code>fs.stat()</code> to check for the existence of a file before calling <code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended. Instead, user code should open/read/write the file directly and handle the error raised if the file is not available.</p>\n<p>To check if a file exists without manipulating it afterwards, <code>fs.access()</code> is recommended.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>fs.stat.options</p>\n","type":"Object","optional":true},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error, fs.Stats>"}],"returns":{"type":"void"}},{"name":"statSync","summary":"<p>Synchronous <code>stat</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"fs.stat.options","optional":true}],"returns":{"type":"fs.Stats"}},{"name":"symlink","summary":"<p>Asynchronous <code>symlink</code> which creates the link called <code>path</code> pointing to <code>target</code>. No arguments other than a possible exception are given to the completion callback.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"target","summary":"<p>target of the new symlink</p>\n","type":["String","buffer.Buffer"]},{"name":"path","summary":"<p>the symlink path</p>\n","type":["String","buffer.Buffer"]},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"symlinkSync","summary":"<p>Synchronous <code>symlink</code> which creates the link called <code>path</code> pointing to <code>target</code>. No arguments other than a possible exception are given to the completion callback.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"target","summary":"<p>target of the new symlink</p>\n","type":["String","buffer.Buffer"]},{"name":"path","summary":"<p>the symlink path</p>\n","type":["String","buffer.Buffer"]}],"returns":{"type":"void"}},{"name":"truncate","summary":"<p>Asynchronous <code>truncate</code>. Returns <code>undefined</code>.\nA file descriptor can also be passed as the first argument. In this case, <code>fs.ftruncateSync()</code> is called.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"len","summary":"<p>target length to truncate to</p>\n","type":"Number","optional":true},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"truncateSync","summary":"<p>Synchronous <code>truncate</code>. Returns <code>undefined</code>.\nA file descriptor can also be passed as the first argument. In this case, <code>fs.ftruncateSync()</code> is called.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"len","summary":"<p>target length to truncate to</p>\n","type":"Number","optional":true}],"returns":{"type":"void"}},{"name":"unlink","summary":"<p>Asynchronous <code>unlink</code>. Returns <code>undefined</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"unlinkSync","summary":"<p>Synchronous <code>unlink</code>. Returns <code>undefined</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]}],"returns":{"type":"void"}},{"name":"unwatchFile","summary":"<p>Stop watching for changes on <code>filename</code>. If <code>listener</code> is specified, only that particular <code>listener</code> is removed. Otherwise, all listeners are removed, effectively stopping watching of <code>filename</code>.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"filename","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"listener","summary":"<p>callback function when file changes</p>\n","type":"Function","optional":true}],"returns":{"type":"void"}},{"name":"utimes","summary":"<p>Change the file system timestamps of the object referenced by <code>path</code>.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"atime","summary":"<p>access time</p>\n","type":["Number","String","Date"]},{"name":"mtime","summary":"<p>modification time</p>\n","type":["Number","String","Date"]},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"utimesSync","summary":"<p>Change the file system timestamps of the object referenced by <code>path</code>.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"path","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"atime","summary":"<p>access time</p>\n","type":["Number","String","Date"]},{"name":"mtime","summary":"<p>modification time</p>\n","type":["Number","String","Date"]}],"returns":{"type":"void"}},{"name":"watch","summary":"<p>Watch for changes on <code>filename</code>, where <code>filename</code> is either a file or a directory.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"filename","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"Object","optional":true},{"name":"listener","summary":"<p>callback function when file changes</p>\n","type":"Function","optional":true}],"returns":{"type":"void"}},{"name":"watchFile","summary":"<p>Watch for changes on <code>filename</code>. The callback <code>listener</code> will be called each time the file is accessed.</p>\n<p><strong>This is a no-op on Titanium.</strong></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"filename","summary":"<p>file path</p>\n","type":["String","buffer.Buffer"]},{"name":"options","summary":"<p>options</p>\n","type":"Object","optional":true},{"name":"listener","summary":"<p>callback function when file changes</p>\n","type":"Function"}],"returns":{"type":"void"}},{"name":"write","summary":"<p>For detailed information, see the documentation of the asynchronous version of this API.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fd","summary":"<p>file descriptor</p>\n","type":"Number"},{"name":"buffer","summary":"<p>buffer contents to write</p>\n","type":["String","buffer.Buffer"]},{"name":"offset","summary":"<p>from the beginning of the file where this data should be written</p>\n","type":"Number","optional":true},{"name":"length","summary":"<p>length in bytes of <code>Buffer</code>; or string character <code>encoding</code></p>\n","type":["String","Number"],"optional":true},{"name":"position","summary":"<p>offset from the beginning of the file where this data should be written (if data to be written is a <code>Buffer</code>)</p>\n","type":"Number","optional":true},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"writeFile","summary":"<p>When <code>file</code> is a filename, asynchronously writes data to the file, replacing the file if it already exists. <code>data</code> can be a string or a buffer.</p>\n<p>When <code>file</code> is a file descriptor, the behavior is similar to calling <code>fs.write()</code> directly (which is recommended). See the notes below on using a file descriptor.</p>\n<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer. If <code>data</code> is a normal object, it must have an own <code>toString</code> function property.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"file","summary":"<p>filename or file descriptor</p>\n","type":["String","buffer.Buffer","Number"]},{"name":"data","summary":"<p>data to write</p>\n","type":["String","buffer.Buffer","Object"]},{"name":"options","summary":"<p>from the beginning of the file where this data should be written</p>\n","type":"fs.writeFile.options","optional":true},{"name":"callback","summary":"<p>typical async callback function</p>\n","type":"Function<Error>"}],"returns":{"type":"void"}},{"name":"writeFileSync","summary":"<p>For detailed information, see the documentation of the asynchronous version of this API: <code>fs.writeFile()</code>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"file","summary":"<p>filename or file descriptor</p>\n","type":["String","buffer.Buffer","Number"]},{"name":"data","summary":"<p>data to write</p>\n","type":["String","buffer.Buffer","Object"]},{"name":"options","summary":"<p>from the beginning of the file where this data should be written</p>\n","type":"fs.writeFile.options","optional":true}],"returns":{"type":"void"}},{"name":"writeSync","summary":"<p>For detailed information, see the documentation of the asynchronous version of this API.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"parameters":[{"name":"fd","summary":"<p>file descriptor</p>\n","type":"Number"},{"name":"buffer","summary":"<p>buffer contents to write</p>\n","type":["String","buffer.Buffer"]},{"name":"offset","summary":"<p>from the beginning of the file where this data should be written</p>\n","type":"Number","optional":true},{"name":"length","summary":"<p>length in bytes of <code>Buffer</code>; or string character <code>encoding</code></p>\n","type":["String","Number"],"optional":true},{"name":"position","summary":"<p>offset from the beginning of the file where this data should be written (if data to be written is a <code>Buffer</code>)</p>\n","type":"Number","optional":true}],"returns":{"summary":"<p>bytes written</p>\n","type":"Number"}}],"properties":[{"name":"constants","summary":"<p>Returns an object containing commonly used constants for file system operations. The specific constants currently defined are described in <a href=\"/api/structs/fs/constants.html\">fs.constants</a>.</p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"fs.constants"},{"name":"ReadStream","summary":"<p>The class <code>fs.ReadStream</code></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"fs.ReadStream"},{"name":"Stats","summary":"<p>The class <code>fs.Stats</code></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"fs.Stats"},{"name":"WriteStream","summary":"<p>The class <code>fs.WriteStream</code></p>\n","platforms":[{"since":"8.3.0","name":"android"},{"since":"8.3.0","name":"iphone"},{"since":"8.3.0","name":"ipad"},{"since":"9.2.0","name":"macos"}],"type":"fs.WriteStream"}],"events":[],"constants":[]}
